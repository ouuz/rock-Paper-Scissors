/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Rock.frame;

import java.awt.event.*;
import java.util.Calendar;
import java.util.Timer;
import Rock.Person;
import Rock.Computer;
import javax.swing.ImageIcon;

/**
 *
 * @author ouu
 */
public class GameFrame extends javax.swing.JFrame {

    ImageIcon endIcon = new ImageIcon("src\\image\\0.png");
    ImageIcon countIcon = new ImageIcon("src\\image\\countDown.gif");
    ImageIcon fistGif = new ImageIcon("src\\image\\fist.gif");
    private final String[] iconBox = {"src\\image\\1.png", "src\\image\\2.png", "src\\image\\3.png"};
    private int round = 0;
    private String battleMode = "";
    private int player2WinNumber = 0;
    private int player1WinNumber = 0;
    private int hadRound = 0;
    private int aheadRound = 0;
    private int player1Code = 3;
    private int player2Code = 3;

    Person player1 = new Person();
    Person player2 = new Person();
    Computer player3 = new Computer();

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameIcon = new javax.swing.JLabel();
        beginBtn = new javax.swing.JButton();
        player1Label = new javax.swing.JLabel();
        player1ResultIcon = new javax.swing.JLabel();
        player1WinLabel = new javax.swing.JLabel();
        player1Win = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        player2ResultIcon = new javax.swing.JLabel();
        player2WinLabel = new javax.swing.JLabel();
        player2Win = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gameIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/countstart.png"))); // NOI18N

        beginBtn.setText("begin");
        beginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginBtnActionPerformed(evt);
            }
        });

        player1Label.setText("player1");

        player1ResultIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/1.png"))); // NOI18N

        player1WinLabel.setText("player1Win：");

        player1Win.setText("0");

        player2Label.setText("player2");

        player2ResultIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/1.png"))); // NOI18N

        player2WinLabel.setText("player2Win：");

        player2Win.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(player1Label))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(player1ResultIcon))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(player1WinLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(player1Win)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(player2Label))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(player2ResultIcon))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(player2WinLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(player2Win)))
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(364, 364, 364)
                        .addComponent(gameIcon))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(beginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(334, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(gameIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(beginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(player2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(player2ResultIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player2WinLabel)
                            .addComponent(player2Win)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(player1Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(player1ResultIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player1WinLabel)
                            .addComponent(player1Win))))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @description 游戏开始
     */
    private void beginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginBtnActionPerformed
        countDown();
        if ("Man VS Man".equals(battleMode)) {   
            beginBtn.addKeyListener(new KeyAdapter() {
                int flag = 0;

                public void keyPressed(KeyEvent e) {
                    getKeyWord(e, player1, player2);
                    flag++;
                    if (flag == 2) {
                        player1Code = player1.getFistCode();
                        player2Code = player2.getFistCode();
                        beginBtn.removeKeyListener(this);
                        flag = 0;
                    }
                }
            }
            );
        } else {            
            beginBtn.addKeyListener(new KeyAdapter() {
                public void keyPressed(KeyEvent e) {
                    getKeyWord(e, player1);
                    player1Code = player1.getFistCode();
                    player2Code = player3.getFistCode();
                    beginBtn.removeKeyListener(this);
                }
            });
        }
    }//GEN-LAST:event_beginBtnActionPerformed

    /**
     * @description 人人对战时同时按下键盘放出错判断
     * @param player1Code 玩家1的出拳结果代表号码
     * @param player2Code 玩家2的出拳结果代表号码
     */
    public void mistakeProofing(int player1Code, int player2Code) {
        judge(player1Code, player2Code);
        changeIcon(player1Code, player2Code);

        if (hadRound >= round || player1WinNumber >= aheadRound || player2WinNumber >= aheadRound) {
            java.awt.EventQueue.invokeLater(() -> {
                dialogJFrame dialog = new dialogJFrame();
                dialog.setFinalStatement(battleMode, getFinalWinner());
                dialog.setVisible(true);
                dispose();
            });
        }

    }

    /**
     * @description 人机对战获得玩家出拳结果 player1: a:布49 => 0 b:剪刀50 => 1 c:石头51 => 2
     * @param e 监听键盘事件的e
     * @param player1 玩家1
     */
    public void getKeyWord(KeyEvent e, Person player1) {
        switch (e.getKeyCode()) {
            case 37:
                player1.changeFistCode(0);
                break;
            case 40:
                player1.changeFistCode(1);
                break;
            case 39:
                player1.changeFistCode(2);
                break;
        }
    }

    /**
     * @description 人人对战获得玩家出拳结果 player1: a:布49 => 0 b:剪刀50 => 1 c:石头51 => 2
     * player2: ←:布37 => 0 ↓:剪刀40 => 1 →:石头39 => 2
     * @param e 监听键盘事件的e
     * @param player1 玩家1
     * @param player2 玩家2
     */
    public void getKeyWord(KeyEvent e, Person player1, Person player2) {
        switch (e.getKeyCode()) {
            case 49:
                player1.changeFistCode(0);
                break;
            case 50:
                player1.changeFistCode(1);
                break;
            case 51:
                player1.changeFistCode(2);
                break;
            case 37:
                player2.changeFistCode(0);
                break;
            case 40:
                player2.changeFistCode(1);
                break;
            case 39:
                player2.changeFistCode(2);
                break;
        }
    }

    /**
     * @description 初始化游戏模式+回合
     * @param battleMode 游戏模式
     * @param round 游戏回合
     */
    public void inital(String battleMode, int round) {
        if ("Man VS Computer".equals(battleMode)) {
            player1WinLabel.setText("playerWin");
            player2WinLabel.setText("computerWin");
        }
        this.round = round;
        switch (round) {
            case 5:
                aheadRound = 3;
                break;
            case 3:
                aheadRound = 2;
                break;
            default:
                aheadRound = 1;
                break;
        }

        this.battleMode = battleMode;

    }

    /**
     * @description 玩家出拳后改变页面上的出拳结果
     * @param player1Code 玩家1出的拳对应代表号码
     * @param player2Code 玩家2出的拳对应代表号码
     */
    public void changeIcon(int player1Code, int player2Code) {
        ImageIcon image1 = new ImageIcon(iconBox[player1Code]);
        ImageIcon image2 = new ImageIcon(iconBox[player2Code]);
        player1ResultIcon.setIcon(image1);
        player2ResultIcon.setIcon(image2);
    }

    /**
     * @description 判断游戏结果
     * @param player1Code 玩家1出的拳对应代表号码
     * @param player2Code 玩家2出的拳对应代表号码
     */
    public void judge(int player1Code, int player2Code) {
        if (player1Code == (player2Code + 1) % 3) {
            player1WinNumber++;
        } else if (player1Code == player2Code) {
        } else {
            player2WinNumber++;
        }

        player1Win.setText(Integer.toString(player1WinNumber));
        player2Win.setText(Integer.toString(player2WinNumber));
        hadRound++;
    }

    /**
     * @description 游戏开始后的倒计时
     */
    public void countDown() {
        gameIcon.setIcon(countIcon);
        player1ResultIcon.setIcon(fistGif);
        player2ResultIcon.setIcon(fistGif);

        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.SECOND, 03);

        Timer timer = new Timer();
        timer.schedule(new java.util.TimerTask() {
            @Override
            public void run() {
                gameIcon.setIcon(endIcon);
                mistakeProofing(player1Code, player2Code);
            }
        }, calendar.getTime());
    }

    /**
     * @return 获胜玩家的名字
     * @description 判断游戏的最后赢家
     */
    public String getFinalWinner() {
        String winner;
        if ("Man VS Man".equals(battleMode)) {
            if (player1WinNumber > player2WinNumber) {
                winner = "player1";
            } else if (player1WinNumber < player2WinNumber) {
                winner = "player2";
            } else {
                winner = "equal";
            }
        } else {
            if (player1WinNumber > player2WinNumber) {
                winner = "man";
            } else if (player1WinNumber < player2WinNumber) {
                winner = "computer";
            } else {
                winner = "equal";
            }
        }
        return winner;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton beginBtn;
    private javax.swing.JLabel gameIcon;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player1ResultIcon;
    private javax.swing.JLabel player1Win;
    private javax.swing.JLabel player1WinLabel;
    private javax.swing.JLabel player2Label;
    private javax.swing.JLabel player2ResultIcon;
    private javax.swing.JLabel player2Win;
    private javax.swing.JLabel player2WinLabel;
    // End of variables declaration//GEN-END:variables
}
